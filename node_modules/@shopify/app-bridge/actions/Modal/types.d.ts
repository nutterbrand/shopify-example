import { Button, Payload as ButtonPayload } from '../Button';
export declare enum Action {
    OPEN = "OPEN",
    CLOSE = "CLOSE",
    UPDATE = "UPDATE",
    UPDATE_SIZE = "UPDATE_SIZE",
    DATA = "DATA"
}
/**
 * Action types for the Modal group
 * @public
 */
export declare enum ActionType {
    OPEN = "APP::MODAL::OPEN",
    CLOSE = "APP::MODAL::CLOSE",
    UPDATE = "APP::MODAL::UPDATE",
    FOOTER_BUTTON_CLICK = "APP::MODAL::FOOTER::BUTTON::CLICK",
    FOOTER_BUTTON_UPDATE = "APP::MODAL::FOOTER::BUTTON::UPDATE",
    UPDATE_SIZE = "APP::MODAL::UPDATE_SIZE",
    DATA = "APP::MODAL::DATA"
}
/**
 * Options available to the Modal `size` param
 * @public
 */
export declare enum Size {
    /** Small modal size */
    Small = "small",
    /** Medium modal size */
    Medium = "medium",
    /** Large modal size (wider than medium) */
    Large = "large",
    /** @deprecated as of 1.6.5 */
    Full = "full",
    /**
     * @deprecated as of 1.12.x
     * @remarks
     * This option has been removed in favour of the `setUpModalAutoSizing` utility.
     * See `app-bridge-utils` package for more information
     */
    Auto = "auto"
}
export interface BasePayload {
    readonly id?: string;
    size?: Size;
    title?: string;
    footer?: Footer;
}
export interface MessagePayload extends BasePayload {
    message: string;
}
export interface IframePayload extends BasePayload {
    url?: string;
    path?: string;
}
/**
 * Payload interface for APP::MODAL::UPDATE_SIZE action
 * @internal
 */
export interface UpdateSizePayload {
    readonly id?: string;
    /** desired modal height in px, no suffix */
    readonly height?: string;
}
export interface ClosePayload {
    readonly id?: string;
}
export interface FooterOptions {
    buttons: {
        primary?: Button;
        secondary?: Button[];
    };
}
export interface Footer {
    buttons: {
        primary?: ButtonPayload;
        secondary?: ButtonPayload[];
    };
}
export interface MessageOptions extends MessagePayload {
    footer?: FooterOptions;
}
export interface IframeOptions extends IframePayload {
    footer?: FooterOptions;
}
export interface ModalDataPayload {
    [key: string]: any;
}
