import { ClientApplication } from '../../client';
import { ActionSet } from '../helper';
import { ActionSetProps, Group, MetaAction } from '../types';
import { Action, ActionType, ClearPayload, Options, Payload } from './types';
export interface ActionBase extends MetaAction {
    readonly group: typeof Group.Toast;
}
export interface ShowAction extends ActionBase {
    readonly type: typeof ActionType.SHOW;
    readonly payload: Payload;
}
export interface ClearAction extends ActionBase {
    readonly type: typeof ActionType.CLEAR;
}
export declare type ToastAction = ShowAction | ClearAction | MetaAction;
export declare function show(toastMessage: Payload): ShowAction;
export declare function clear(payload: ClearPayload): ClearAction;
export declare class Toast extends ActionSet implements ActionSetProps<Options, Payload> {
    message: string;
    duration: number;
    isError?: boolean;
    constructor(app: ClientApplication<any>, options: Options);
    get options(): Options;
    get payload(): Payload;
    set(options: Partial<Options>): this;
    dispatch(action: Action): this;
}
export declare function create(app: ClientApplication<any>, options: Options): Toast;
