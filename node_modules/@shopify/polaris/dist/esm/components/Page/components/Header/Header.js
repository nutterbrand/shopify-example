import { objectSpread2 as _objectSpread2 } from '../../../../_virtual/_rollupPluginBabelHelpers.js';
import React$1, { isValidElement } from 'react';
import { useFeatures } from '../../../../utilities/features/hooks.js';
import { useMediaQuery } from '../../../../utilities/media-query/hooks.js';
import { classNames } from '../../../../utilities/css.js';
import { ConditionalWrapper, ConditionalRender } from '../../../../utilities/components.js';
import { TextStyle as TextStyle$1 } from '../../../TextStyle/TextStyle.js';
import { buttonsFrom } from '../../../Button/utils.js';
import { ButtonGroup as ButtonGroup$1 } from '../../../ButtonGroup/ButtonGroup.js';
import { hasGroupsWithActions, ActionMenu as ActionMenu$1 } from '../../../ActionMenu/ActionMenu.js';
import { Breadcrumbs as Breadcrumbs$1 } from '../../../Breadcrumbs/Breadcrumbs.js';
import { Pagination as Pagination$1 } from '../../../Pagination/Pagination.js';
import { Title as Title$1 } from './components/Title/Title.js';
import styles from './Header.scss.js';

function isPrimaryAction(x) {
  return ! /*#__PURE__*/isValidElement(x) && x !== undefined;
}
const SHORT_TITLE = 20;
const REALLY_SHORT_TITLE = 8;
const LONG_TITLE = 34;
function Header({
  title,
  subtitle,
  titleMetadata,
  additionalMetaData,
  thumbnail,
  titleHidden = false,
  separator,
  primaryAction,
  pagination,
  additionalNavigation,
  breadcrumbs = [],
  secondaryActions = [],
  actionGroups = []
}) {
  const {
    isNavigationCollapsed
  } = useMediaQuery();
  const {
    newDesignLanguage
  } = useFeatures();
  const isSingleRow = !primaryAction && !pagination && !secondaryActions.length && !actionGroups.length;
  const breadcrumbMarkup = breadcrumbs.length > 0 ? /*#__PURE__*/React$1.createElement("div", {
    className: classNames(styles.BreadcrumbWrapper, newDesignLanguage && styles.newDesignLanguage)
  }, /*#__PURE__*/React$1.createElement(Breadcrumbs$1, {
    breadcrumbs: breadcrumbs
  })) : null;
  const paginationMarkup = pagination && !isNavigationCollapsed ? /*#__PURE__*/React$1.createElement("div", {
    className: styles.PaginationWrapper
  }, /*#__PURE__*/React$1.createElement(Pagination$1, Object.assign({}, pagination, {
    plain: true
  }))) : null;
  const additionalNavigationMarkup = additionalNavigation ? /*#__PURE__*/React$1.createElement("div", {
    className: styles.AdditionalNavigationWrapper
  }, additionalNavigation) : null;
  const navigationMarkup = breadcrumbMarkup || paginationMarkup || additionalNavigationMarkup ? /*#__PURE__*/React$1.createElement("div", {
    className: styles.Navigation
  }, breadcrumbMarkup, additionalNavigationMarkup, paginationMarkup) : null;
  const pageTitleMarkup = /*#__PURE__*/React$1.createElement("div", {
    className: styles.TitleWrapper
  }, /*#__PURE__*/React$1.createElement(Title$1, {
    title: title,
    subtitle: subtitle,
    titleMetadata: titleMetadata,
    thumbnail: thumbnail
  }));
  const primaryActionMarkup = primaryAction ? /*#__PURE__*/React$1.createElement(PrimaryActionMarkup, {
    primaryAction: primaryAction
  }) : null;
  const actionMenuMarkup = secondaryActions.length > 0 || hasGroupsWithActions(actionGroups) ? /*#__PURE__*/React$1.createElement(ConditionalWrapper, {
    condition: newDesignLanguage === false,
    wrapper: children => /*#__PURE__*/React$1.createElement("div", {
      className: styles.ActionMenuWrapper
    }, children)
  }, /*#__PURE__*/React$1.createElement(ActionMenu$1, {
    actions: secondaryActions,
    groups: actionGroups,
    rollup: isNavigationCollapsed
  })) : null;
  const additionalMetaDataMarkup = additionalMetaData ? /*#__PURE__*/React$1.createElement("div", {
    className: styles.AdditionalMetaData
  }, /*#__PURE__*/React$1.createElement(TextStyle$1, {
    variation: "subdued"
  }, additionalMetaData)) : null;
  const headerClassNames = classNames(styles.Header, separator && styles.separator, isSingleRow && styles.isSingleRow, titleHidden && styles.titleHidden, navigationMarkup && styles.hasNavigation, actionMenuMarkup && styles.hasActionMenu, isNavigationCollapsed && styles.mobileView, !breadcrumbs.length && styles.noBreadcrumbs, newDesignLanguage && styles.newDesignLanguage, title && title.length < LONG_TITLE && styles.mediumTitle, title && title.length > LONG_TITLE && styles.longTitle);

  if (newDesignLanguage) {
    const {
      slot1,
      slot2,
      slot3,
      slot4,
      slot5,
      slot6
    } = determineLayout({
      actionMenuMarkup,
      additionalMetaDataMarkup,
      additionalNavigationMarkup,
      breadcrumbMarkup,
      isNavigationCollapsed,
      pageTitleMarkup,
      paginationMarkup,
      primaryActionMarkup,
      title
    });
    const className = classNames(styles.Row, newDesignLanguage && styles.RowCondensed);
    return /*#__PURE__*/React$1.createElement("div", {
      className: headerClassNames
    }, /*#__PURE__*/React$1.createElement(ConditionalRender, {
      condition: [slot1, slot2, slot3, slot4].some(notNull)
    }, /*#__PURE__*/React$1.createElement("div", {
      className: className
    }, slot1, slot2, /*#__PURE__*/React$1.createElement(ConditionalRender, {
      condition: [slot3, slot4].some(notNull)
    }, /*#__PURE__*/React$1.createElement("div", {
      className: styles.RightAlign
    }, /*#__PURE__*/React$1.createElement(ConditionalWrapper, {
      condition: [slot3, slot4].every(notNull),
      wrapper: children => newDesignLanguage ? /*#__PURE__*/React$1.createElement("div", {
        className: styles.Actions
      }, children) : /*#__PURE__*/React$1.createElement(ButtonGroup$1, null, children)
    }, slot3, slot4))))), /*#__PURE__*/React$1.createElement(ConditionalRender, {
      condition: [slot5, slot6].some(notNull)
    }, /*#__PURE__*/React$1.createElement("div", {
      className: styles.Row
    }, /*#__PURE__*/React$1.createElement("div", {
      className: styles.LeftAlign
    }, slot5), /*#__PURE__*/React$1.createElement(ConditionalRender, {
      condition: slot6 != null
    }, /*#__PURE__*/React$1.createElement("div", {
      className: styles.RightAlign
    }, slot6)))));
  }

  return /*#__PURE__*/React$1.createElement("div", {
    className: headerClassNames
  }, navigationMarkup, /*#__PURE__*/React$1.createElement("div", {
    className: styles.MainContent
  }, /*#__PURE__*/React$1.createElement("div", {
    className: styles.TitleActionMenuWrapper
  }, pageTitleMarkup, actionMenuMarkup), primaryActionMarkup));
}

function PrimaryActionMarkup({
  primaryAction
}) {
  const {
    isNavigationCollapsed
  } = useMediaQuery();
  const {
    newDesignLanguage
  } = useFeatures();
  let content = primaryAction;

  if (isPrimaryAction(primaryAction)) {
    const primary = primaryAction.primary === undefined ? true : primaryAction.primary;
    content = buttonsFrom(shouldShowIconOnly(newDesignLanguage, isNavigationCollapsed, primaryAction), {
      primary
    });
  }

  return /*#__PURE__*/React$1.createElement("div", {
    className: styles.PrimaryActionWrapper
  }, content);
}

function shouldShowIconOnly(newDesignLanguage, isMobile, action) {
  let {
    content,
    accessibilityLabel,
    icon
  } = action;
  if (!newDesignLanguage || icon == null) return _objectSpread2(_objectSpread2({}, action), {}, {
    icon: undefined
  });

  if (isMobile) {
    accessibilityLabel = accessibilityLabel || content;
    content = undefined;
  } else {
    icon = undefined;
  }

  return _objectSpread2(_objectSpread2({}, action), {}, {
    content,
    accessibilityLabel,
    icon
  });
}

function notNull(value) {
  return value != null;
}

function determineLayout({
  actionMenuMarkup,
  additionalMetaDataMarkup,
  additionalNavigationMarkup,
  breadcrumbMarkup,
  isNavigationCollapsed,
  pageTitleMarkup,
  paginationMarkup,
  primaryActionMarkup,
  title
}) {
  //    Header Layout
  // |----------------------------------------------------|
  // | slot1 | slot2 |                    | slot3 | slot4 |
  // |----------------------------------------------------|
  // | slot5 |                                    | slot6 |
  // |----------------------------------------------------|
  //
  const layouts = {
    mobileCompact: {
      slots: {
        slot1: null,
        slot2: pageTitleMarkup,
        slot3: actionMenuMarkup,
        slot4: primaryActionMarkup,
        slot5: additionalMetaDataMarkup,
        slot6: additionalNavigationMarkup
      },
      condition: isNavigationCollapsed && breadcrumbMarkup == null && title != null && title.length <= REALLY_SHORT_TITLE
    },
    mobileDefault: {
      slots: {
        slot1: breadcrumbMarkup,
        slot2: pageTitleMarkup,
        slot3: actionMenuMarkup,
        slot4: primaryActionMarkup,
        slot5: additionalMetaDataMarkup,
        slot6: additionalNavigationMarkup
      },
      condition: isNavigationCollapsed
    },
    desktopCompact: {
      slots: {
        slot1: breadcrumbMarkup,
        slot2: pageTitleMarkup,
        slot3: actionMenuMarkup,
        slot4: primaryActionMarkup,
        slot5: additionalMetaDataMarkup,
        slot6: additionalNavigationMarkup
      },
      condition: !isNavigationCollapsed && paginationMarkup == null && actionMenuMarkup == null && title != null && title.length <= SHORT_TITLE
    },
    desktopDefault: {
      slots: {
        slot1: breadcrumbMarkup,
        slot2: pageTitleMarkup,
        slot3: /*#__PURE__*/React$1.createElement(React$1.Fragment, null, actionMenuMarkup, primaryActionMarkup),
        slot4: paginationMarkup,
        slot5: additionalMetaDataMarkup,
        slot6: additionalNavigationMarkup
      },
      condition: !isNavigationCollapsed
    }
  };
  const layout = Object.values(layouts).find(layout => layout.condition) || layouts.desktopDefault;
  return layout.slots;
}

export { Header, isPrimaryAction };
