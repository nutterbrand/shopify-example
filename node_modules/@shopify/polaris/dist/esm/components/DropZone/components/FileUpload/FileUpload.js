import React$1, { useContext } from 'react';
import { useFeatures } from '../../../../utilities/features/hooks.js';
import { useI18n } from '../../../../utilities/i18n/hooks.js';
import { classNames } from '../../../../utilities/css.js';
import { TextStyle as TextStyle$1 } from '../../../TextStyle/TextStyle.js';
import { Stack as Stack$1 } from '../../../Stack/Stack.js';
import { Caption as Caption$1 } from '../../../Caption/Caption.js';
import { capitalize as capitalize$1 } from '../../../../utilities/capitalize.js';
import img from '../../images/upload-arrow.svg.js';
import { DropZoneContext } from '../../context.js';
import styles from './FileUpload.scss.js';

var _ref = /*#__PURE__*/React$1.createElement("img", {
  width: "40",
  src: img,
  alt: ""
});

var _ref2 = /*#__PURE__*/React$1.createElement("img", {
  width: "40",
  src: img,
  alt: ""
});

var _ref3 = /*#__PURE__*/React$1.createElement("img", {
  width: "20",
  src: img,
  alt: ""
});

function FileUpload(props) {
  const i18n = useI18n();
  const {
    newDesignLanguage
  } = useFeatures();
  const {
    size,
    measuring,
    type,
    focused,
    disabled
  } = useContext(DropZoneContext);
  const suffix = capitalize$1(type);
  const {
    actionTitle = i18n.translate(`Polaris.DropZone.FileUpload.actionTitle${suffix}`),
    actionHint = i18n.translate(`Polaris.DropZone.FileUpload.actionHint${suffix}`)
  } = props;
  const buttonStyles = size === 'extraLarge' || size === 'large' ? classNames(styles.Button, newDesignLanguage && styles.newDesignLanguage, size && size !== 'extraLarge' && styles.slim, focused && styles.focused, disabled && styles.disabled) : null;
  const buttonMarkup = (size === 'extraLarge' || size === 'large') && buttonStyles ? /*#__PURE__*/React$1.createElement("div", {
    className: buttonStyles
  }, actionTitle) : null;
  const actionTitleClassName = classNames(styles.ActionTitle, focused && !disabled && styles['ActionTitle-focused'], disabled && styles['ActionTitle-disabled']);
  const actionTitleMarkup = /*#__PURE__*/React$1.createElement("div", {
    className: actionTitleClassName
  }, actionTitle);
  const fileUploadClassName = classNames(styles.FileUpload, newDesignLanguage && styles.newDesignLanguage, measuring && styles.measuring, size === 'small' && styles.FileUploadSmallView);
  let viewMarkup;

  switch (size) {
    case 'extraLarge':
      viewMarkup = /*#__PURE__*/React$1.createElement(Stack$1, {
        vertical: true
      }, _ref, buttonMarkup, /*#__PURE__*/React$1.createElement(TextStyle$1, {
        variation: "subdued"
      }, actionHint));
      break;

    case 'large':
      viewMarkup = /*#__PURE__*/React$1.createElement(Stack$1, {
        vertical: true,
        spacing: "tight"
      }, _ref2, buttonMarkup, /*#__PURE__*/React$1.createElement(Caption$1, null, /*#__PURE__*/React$1.createElement(TextStyle$1, {
        variation: "subdued"
      }, actionHint)));
      break;

    case 'medium':
      viewMarkup = /*#__PURE__*/React$1.createElement(Stack$1, {
        vertical: true,
        spacing: "tight"
      }, actionTitleMarkup, /*#__PURE__*/React$1.createElement(Caption$1, null, /*#__PURE__*/React$1.createElement(TextStyle$1, {
        variation: "subdued"
      }, actionHint)));
      break;

    case 'small':
      viewMarkup = _ref3;
      break;
  }

  return /*#__PURE__*/React$1.createElement("div", {
    className: fileUploadClassName
  }, viewMarkup);
}

export { FileUpload };
