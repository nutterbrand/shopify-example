import React$1, { useCallback } from 'react';
import { useFeatures } from '../../../../utilities/features/hooks.js';
import { classNames } from '../../../../utilities/css.js';
import { Scrollable as Scrollable$1 } from '../../../Scrollable/Scrollable.js';
import { useToggle as useToggle$1 } from '../../../../utilities/use-toggle.js';
import { Checkbox as Checkbox$1 } from '../Checkbox/Checkbox.js';
import styles from './Option.scss.js';

var _ref = /*#__PURE__*/React$1.createElement(Scrollable$1.ScrollTo, null);

function Option({
  label,
  value,
  id,
  select,
  active,
  allowMultiple,
  disabled,
  role,
  media,
  onClick,
  section,
  index
}) {
  const {
    value: focused,
    toggle: toggleFocused
  } = useToggle$1(false);
  const {
    newDesignLanguage
  } = useFeatures();
  const handleClick = useCallback(() => {
    if (disabled) {
      return;
    }

    onClick(section, index);
  }, [disabled, index, onClick, section]);
  const mediaMarkup = media ? /*#__PURE__*/React$1.createElement("div", {
    className: styles.Media
  }, media) : null;
  const singleSelectClassName = classNames(styles.SingleSelectOption, focused && styles.focused, disabled && styles.disabled, select && styles.select, active && styles.active);
  const multiSelectClassName = classNames(styles.Label, disabled && styles.disabled, active && styles.active, newDesignLanguage && select && styles.select);
  const checkBoxRole = role === 'option' ? 'presentation' : undefined;
  const optionMarkup = allowMultiple ? /*#__PURE__*/React$1.createElement("label", {
    htmlFor: id,
    className: multiSelectClassName
  }, /*#__PURE__*/React$1.createElement("div", {
    className: styles.Checkbox
  }, /*#__PURE__*/React$1.createElement(Checkbox$1, {
    id: id,
    value: value,
    checked: select,
    active: active,
    disabled: disabled,
    onChange: handleClick,
    role: checkBoxRole
  })), mediaMarkup, label) : /*#__PURE__*/React$1.createElement("button", {
    id: id,
    type: "button",
    className: singleSelectClassName,
    onClick: handleClick,
    disabled: disabled,
    onFocus: toggleFocused,
    onBlur: toggleFocused
  }, mediaMarkup, label);
  const scrollMarkup = active ? _ref : null;
  const optionClassName = classNames(styles.Option, newDesignLanguage && styles.newDesignLanguage);
  return /*#__PURE__*/React$1.createElement("li", {
    key: id,
    className: optionClassName,
    tabIndex: -1,
    "aria-selected": active,
    role: role
  }, scrollMarkup, optionMarkup);
}

export { Option };
