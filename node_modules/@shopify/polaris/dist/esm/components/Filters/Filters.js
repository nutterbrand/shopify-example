import { Key } from '../../types.js';
import React$1, { Component, createRef, Fragment } from 'react';
import { useFeatures } from '../../utilities/features/hooks.js';
import { useMediaQuery } from '../../utilities/media-query/hooks.js';
import { useI18n } from '../../utilities/i18n/hooks.js';
import { classNames } from '../../utilities/css.js';
import { CancelSmallMinor, SearchMinor, ChevronUpMinor, ChevronDownMinor } from '@shopify/polaris-icons';
import { focusFirstFocusableNode } from '../../utilities/focus.js';
import { Icon as Icon$1 } from '../Icon/Icon.js';
import { VisuallyHidden as VisuallyHidden$1 } from '../VisuallyHidden/VisuallyHidden.js';
import { Scrollable as Scrollable$1 } from '../Scrollable/Scrollable.js';
import { KeypressListener as KeypressListener$1 } from '../KeypressListener/KeypressListener.js';
import { WithinFilterContext } from '../../utilities/within-filter-context.js';
import { Badge as Badge$1 } from '../Badge/Badge.js';
import { TextStyle as TextStyle$1 } from '../TextStyle/TextStyle.js';
import { Button as Button$1 } from '../Button/Button.js';
import { Stack as Stack$1 } from '../Stack/Stack.js';
import { TextField as TextField$1 } from '../TextField/TextField.js';
import { ScrollLock as ScrollLock$1 } from '../ScrollLock/ScrollLock.js';
import { ResourceListContext } from '../../utilities/resource-list/context.js';
import { Collapsible as Collapsible$1 } from '../Collapsible/Collapsible.js';
import { DisplayText as DisplayText$1 } from '../DisplayText/DisplayText.js';
import { Tag as Tag$1 } from '../Tag/Tag.js';
import { Focus as Focus$1 } from '../Focus/Focus.js';
import { Sheet as Sheet$1 } from '../Sheet/Sheet.js';
import { ConnectedFilterControl as ConnectedFilterControl$1 } from './components/ConnectedFilterControl/ConnectedFilterControl.js';
import styles from './Filters.scss.js';

var Suffix;

(function (Suffix) {
  Suffix["Filter"] = "Filter";
  Suffix["Shortcut"] = "Shortcut";
})(Suffix || (Suffix = {}));

var _ref = /*#__PURE__*/React$1.createElement(ScrollLock$1, null);

var _ref2 = /*#__PURE__*/React$1.createElement(Icon$1, {
  source: SearchMinor
});

class FiltersInner extends Component {
  constructor(...args) {
    super(...args);
    this.state = {
      open: false,
      readyForFocus: false
    };
    this.moreFiltersButtonContainer = /*#__PURE__*/createRef();
    this.focusNode = /*#__PURE__*/createRef();

    this.closeFilters = () => {
      this.setState({
        open: false
      }, () => {
        if (this.moreFiltersButtonContainer.current) {
          focusFirstFocusableNode(this.moreFiltersButtonContainer.current, false);
        }
      });
    };

    this.toggleFilters = () => {
      if (this.state.open === true) {
        this.closeFilters();
      } else {
        this.openFilters();
      }
    };

    this.setReadyForFocus = newState => () => {
      this.setState({
        readyForFocus: newState
      });
    };
  }

  render() {
    const {
      filters,
      queryValue,
      onQueryBlur,
      onQueryChange,
      onQueryFocus,
      focused,
      onClearAll,
      appliedFilters,
      onQueryClear,
      queryPlaceholder,
      children,
      disabled = false,
      helpText,
      hideTags,
      features: {
        newDesignLanguage
      },
      i18n,
      mediaQuery: {
        isNavigationCollapsed
      }
    } = this.props;
    const {
      resourceName
    } = this.context;
    const {
      open,
      readyForFocus
    } = this.state;
    const backdropMarkup = open ? /*#__PURE__*/React$1.createElement(React$1.Fragment, null, _ref, /*#__PURE__*/React$1.createElement("div", {
      className: styles.Backdrop,
      onClick: this.closeFilters
    })) : null;
    const filtersContentMarkup = filters.map((filter, index) => {
      const filterIsOpen = this.state[`${filter.key}${Suffix.Filter}`] === true;
      const icon = filterIsOpen ? ChevronUpMinor : ChevronDownMinor;
      const className = classNames(styles.FilterTriggerContainer, filterIsOpen && styles.open, index === 0 && styles.first, filters.length !== 1 && index === filters.length - 1 && styles.last);
      const appliedFilterContent = this.getAppliedFilterContent(filter.key);
      const appliedFilterBadgeMarkup = appliedFilterContent ? /*#__PURE__*/React$1.createElement("div", {
        className: styles.AppliedFilterBadgeContainer
      }, /*#__PURE__*/React$1.createElement(Badge$1, {
        size: "small",
        status: "new"
      }, appliedFilterContent)) : null;
      const collapsibleID = `${filter.key}Collapsible`;
      const buttonClassName = classNames(styles.FilterTrigger, newDesignLanguage && styles.newDesignLanguage);
      return /*#__PURE__*/React$1.createElement("div", {
        key: filter.key,
        className: className
      }, /*#__PURE__*/React$1.createElement("button", {
        onClick: () => this.toggleFilter(filter.key),
        className: buttonClassName,
        id: `${filter.key}ToggleButton`,
        type: "button",
        "aria-controls": collapsibleID,
        "aria-expanded": filterIsOpen
      }, /*#__PURE__*/React$1.createElement("div", {
        className: styles.FilterTriggerLabelContainer
      }, /*#__PURE__*/React$1.createElement("h3", {
        className: styles.FilterTriggerTitle
      }, /*#__PURE__*/React$1.createElement(TextStyle$1, {
        variation: this.props.disabled || filter.disabled ? 'subdued' : undefined
      }, filter.label)), /*#__PURE__*/React$1.createElement("span", {
        className: styles.FilterTriggerIcon
      }, /*#__PURE__*/React$1.createElement(Icon$1, {
        source: icon,
        color: "inkLightest"
      }))), appliedFilterBadgeMarkup), /*#__PURE__*/React$1.createElement(Collapsible$1, {
        id: collapsibleID,
        open: filterIsOpen
      }, /*#__PURE__*/React$1.createElement("div", {
        className: styles.FilterNodeContainer
      }, /*#__PURE__*/React$1.createElement(Focus$1, {
        disabled: !filterIsOpen || !readyForFocus || !open,
        root: this.focusNode
      }, this.generateFilterMarkup(filter)))));
    });
    const appliedFiltersCount = appliedFilters ? appliedFilters.length : 0;
    const moreFiltersLabel = hideTags && appliedFiltersCount > 0 ? i18n.translate('Polaris.Filters.moreFiltersWithCount', {
      count: appliedFiltersCount
    }) : i18n.translate('Polaris.Filters.moreFilters');
    const rightActionMarkup = /*#__PURE__*/React$1.createElement("div", {
      ref: this.moreFiltersButtonContainer
    }, /*#__PURE__*/React$1.createElement(Button$1, {
      onClick: this.toggleFilters,
      disabled: disabled
    }, moreFiltersLabel));
    const filterResourceName = resourceName || {
      singular: i18n.translate('Polaris.ResourceList.defaultItemSingular'),
      plural: i18n.translate('Polaris.ResourceList.defaultItemPlural')
    };
    const transformedFilters = this.transformFilters(filters);
    const filtersControlMarkup = /*#__PURE__*/React$1.createElement(ConnectedFilterControl$1, {
      rightPopoverableActions: transformedFilters,
      rightAction: rightActionMarkup,
      auxiliary: children,
      disabled: disabled,
      forceShowMorefiltersButton: filters.length > transformedFilters.length
    }, /*#__PURE__*/React$1.createElement(TextField$1, {
      placeholder: queryPlaceholder || i18n.translate('Polaris.Filters.filter', {
        resourceName: filterResourceName.plural
      }),
      onChange: onQueryChange,
      onBlur: onQueryBlur,
      onFocus: onQueryFocus,
      value: queryValue,
      focused: focused,
      label: queryPlaceholder || i18n.translate('Polaris.Filters.filter', {
        resourceName: filterResourceName.plural
      }),
      labelHidden: true,
      prefix: /*#__PURE__*/React$1.createElement("span", {
        className: styles.SearchIcon
      }, _ref2),
      clearButton: true,
      onClearButtonClick: onQueryClear,
      disabled: disabled
    }));
    const filtersContainerHeaderClassname = classNames(styles.FiltersContainerHeader, newDesignLanguage && styles.newDesignLanguage);
    const filtersDesktopHeaderMarkup = /*#__PURE__*/React$1.createElement("div", {
      className: filtersContainerHeaderClassname
    }, /*#__PURE__*/React$1.createElement(DisplayText$1, {
      size: "small",
      element: "h3"
    }, moreFiltersLabel), /*#__PURE__*/React$1.createElement(Button$1, {
      icon: CancelSmallMinor,
      plain: true,
      accessibilityLabel: i18n.translate('Polaris.Filters.cancel'),
      onClick: this.closeFilters
    }));
    const filtersMobileHeaderMarkup = /*#__PURE__*/React$1.createElement("div", {
      className: filtersContainerHeaderClassname
    }, /*#__PURE__*/React$1.createElement(Button$1, {
      icon: CancelSmallMinor,
      plain: true,
      accessibilityLabel: i18n.translate('Polaris.Filters.cancel'),
      onClick: this.closeFilters
    }), /*#__PURE__*/React$1.createElement(DisplayText$1, {
      size: "small",
      element: "h3"
    }, moreFiltersLabel), /*#__PURE__*/React$1.createElement(Button$1, {
      onClick: this.closeFilters,
      primary: true
    }, i18n.translate('Polaris.Filters.done')));
    const filtersDesktopFooterClassname = classNames(styles.FiltersContainerFooter, newDesignLanguage && styles.newDesignLanguage);
    const filtersDesktopFooterMarkup = /*#__PURE__*/React$1.createElement("div", {
      className: filtersDesktopFooterClassname
    }, /*#__PURE__*/React$1.createElement(Button$1, {
      onClick: onClearAll,
      disabled: !this.hasAppliedFilters()
    }, i18n.translate('Polaris.Filters.clearAllFilters')), /*#__PURE__*/React$1.createElement(Button$1, {
      onClick: this.closeFilters,
      primary: true
    }, i18n.translate('Polaris.Filters.done')));
    const filtersMobileFooterMarkup = /*#__PURE__*/React$1.createElement("div", {
      className: styles.FiltersMobileContainerFooter
    }, this.hasAppliedFilters() ? /*#__PURE__*/React$1.createElement(Button$1, {
      onClick: onClearAll,
      fullWidth: true
    }, i18n.translate('Polaris.Filters.clearAllFilters')) : /*#__PURE__*/React$1.createElement("div", {
      className: styles.EmptyFooterState
    }, /*#__PURE__*/React$1.createElement(TextStyle$1, {
      variation: "subdued"
    }, /*#__PURE__*/React$1.createElement("p", null, i18n.translate('Polaris.Filters.noFiltersApplied')))));
    const shouldHideTagsContainer = !appliedFilters || appliedFilters.length < 1;
    const TagsWrapper = shouldHideTagsContainer ? VisuallyHidden$1 : Fragment;
    const tagsMarkup = !hideTags ? /*#__PURE__*/React$1.createElement(TagsWrapper, null, /*#__PURE__*/React$1.createElement("div", {
      className: styles.TagsContainer,
      "aria-live": "polite"
    }, (appliedFilters || []).map(filter => {
      return /*#__PURE__*/React$1.createElement(Tag$1, {
        key: filter.key,
        onRemove: () => {
          filter.onRemove(filter.key);
        },
        disabled: disabled
      }, filter.label);
    }))) : null;
    const filtersMobileContainerContentClassName = classNames(styles.FiltersMobileContainerContent, newDesignLanguage && styles.newDesignLanguage);
    const filtersDesktopContainerContentClassName = classNames(styles.FiltersDesktopContainerContent, newDesignLanguage && styles.newDesignLanguage);
    const filtersContainerMarkup = isNavigationCollapsed ? /*#__PURE__*/React$1.createElement(Sheet$1, {
      open: open,
      onClose: this.closeFilters,
      onEntered: this.setReadyForFocus(true),
      onExit: this.setReadyForFocus(false)
    }, filtersMobileHeaderMarkup, /*#__PURE__*/React$1.createElement(Scrollable$1, {
      className: filtersMobileContainerContentClassName,
      shadow: true
    }, filtersContentMarkup, filtersMobileFooterMarkup)) : /*#__PURE__*/React$1.createElement(Sheet$1, {
      open: open,
      onClose: this.closeFilters,
      onEntered: this.setReadyForFocus(true),
      onExit: this.setReadyForFocus(false)
    }, /*#__PURE__*/React$1.createElement("div", {
      className: styles.FiltersContainer
    }, filtersDesktopHeaderMarkup, /*#__PURE__*/React$1.createElement(Scrollable$1, {
      className: filtersDesktopContainerContentClassName,
      shadow: true
    }, filtersContentMarkup), filtersDesktopFooterMarkup));
    const helpTextMarkup = helpText ? /*#__PURE__*/React$1.createElement("div", {
      id: "FiltersHelpText",
      className: styles.HelpText
    }, /*#__PURE__*/React$1.createElement(TextStyle$1, {
      variation: "subdued"
    }, helpText)) : null;
    return /*#__PURE__*/React$1.createElement(WithinFilterContext.Provider, {
      value: true
    }, /*#__PURE__*/React$1.createElement("div", {
      className: styles.Filters
    }, filtersControlMarkup, filtersContainerMarkup, tagsMarkup, helpTextMarkup, backdropMarkup, /*#__PURE__*/React$1.createElement(KeypressListener$1, {
      keyCode: Key.Escape,
      handler: this.closeFilters
    })));
  }

  hasAppliedFilters() {
    const {
      appliedFilters,
      queryValue
    } = this.props;
    const filtersApplied = Boolean(appliedFilters && appliedFilters.length > 0);
    const queryApplied = Boolean(queryValue && queryValue !== '');
    return filtersApplied || queryApplied;
  }

  getAppliedFilterContent(key) {
    const {
      appliedFilters
    } = this.props;

    if (!appliedFilters) {
      return undefined;
    }

    const filter = appliedFilters.find(filter => filter.key === key);
    return filter == null ? undefined : filter.label;
  }

  getAppliedFilterRemoveHandler(key) {
    const {
      appliedFilters
    } = this.props;

    if (!appliedFilters) {
      return undefined;
    }

    const filter = appliedFilters.find(filter => filter.key === key);
    return filter == null ? undefined : filter.onRemove;
  }

  openFilters() {
    this.setState({
      open: true
    });
  }

  openFilter(key) {
    this.setState({
      [`${key}${Suffix.Filter}`]: true
    });
  }

  closeFilter(key) {
    this.setState({
      [`${key}${Suffix.Filter}`]: false
    });
  }

  toggleFilter(key) {
    if (this.state[`${key}${Suffix.Filter}`] === true) {
      this.closeFilter(key);
    } else {
      this.openFilter(key);
    }
  }

  openFilterShortcut(key) {
    this.setState({
      [`${key}${Suffix.Shortcut}`]: true
    });
  }

  closeFilterShortcut(key) {
    this.setState({
      [`${key}${Suffix.Shortcut}`]: false
    });
  }

  toggleFilterShortcut(key) {
    if (this.state[`${key}${Suffix.Shortcut}`] === true) {
      this.closeFilterShortcut(key);
    } else {
      this.openFilterShortcut(key);
    }
  }

  transformFilters(filters) {
    const transformedActions = [];
    getShortcutFilters(filters).forEach(filter => {
      const {
        key,
        label,
        disabled
      } = filter;
      transformedActions.push({
        popoverContent: this.generateFilterMarkup(filter),
        popoverOpen: Boolean(this.state[`${key}${Suffix.Shortcut}`]),
        key,
        content: label,
        disabled,
        onAction: () => this.toggleFilterShortcut(key)
      });
    });
    return transformedActions;
  }

  generateFilterMarkup(filter) {
    const i18n = this.props.i18n;
    const removeCallback = this.getAppliedFilterRemoveHandler(filter.key);
    const removeHandler = removeCallback == null ? undefined : () => {
      removeCallback(filter.key);
    };
    return /*#__PURE__*/React$1.createElement("div", {
      ref: this.focusNode
    }, /*#__PURE__*/React$1.createElement(Stack$1, {
      vertical: true,
      spacing: "tight"
    }, filter.filter, /*#__PURE__*/React$1.createElement(Button$1, {
      plain: true,
      disabled: removeHandler == null,
      onClick: removeHandler,
      accessibilityLabel: i18n.translate('Polaris.Filters.clearLabel', {
        filterName: filter.label
      })
    }, i18n.translate('Polaris.Filters.clear'))));
  }

}

FiltersInner.contextType = ResourceListContext;

function getShortcutFilters(filters) {
  return filters.filter(filter => filter.shortcut === true);
}

function Filters(props) {
  const i18n = useI18n();
  const mediaQuery = useMediaQuery();
  const features = useFeatures();
  return /*#__PURE__*/React$1.createElement(FiltersInner, Object.assign({}, props, {
    i18n: i18n,
    mediaQuery: mediaQuery,
    features: features
  }));
}

export { Filters };
