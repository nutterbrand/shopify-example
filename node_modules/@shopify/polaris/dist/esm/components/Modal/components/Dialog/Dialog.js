import { Key } from '../../../../types.js';
import { objectWithoutProperties as _objectWithoutProperties } from '../../../../_virtual/_rollupPluginBabelHelpers.js';
import React$1, { useRef, useEffect } from 'react';
import { durationBase } from '@shopify/polaris-tokens';
import { classNames } from '../../../../utilities/css.js';
import { focusFirstFocusableNode } from '../../../../utilities/focus.js';
import { KeypressListener as KeypressListener$1 } from '../../../KeypressListener/KeypressListener.js';
import { Transition, CSSTransition } from 'react-transition-group';
import { TrapFocus as TrapFocus$1 } from '../../../TrapFocus/TrapFocus.js';
import styles from './Dialog.scss.js';

function Dialog(_ref) {
  let {
    instant,
    labelledBy,
    children,
    onClose,
    onExited,
    onEntered,
    large,
    limitHeight
  } = _ref,
      props = _objectWithoutProperties(_ref, ["instant", "labelledBy", "children", "onClose", "onExited", "onEntered", "large", "limitHeight"]);

  const containerNode = useRef(null);
  const classes = classNames(styles.Modal, large && styles.sizeLarge, limitHeight && styles.limitHeight);
  const TransitionChild = instant ? Transition : FadeUp;
  useEffect(() => {
    containerNode.current && !containerNode.current.contains(document.activeElement) && focusFirstFocusableNode(containerNode.current);
  }, []);
  return /*#__PURE__*/React$1.createElement(TransitionChild, Object.assign({}, props, {
    nodeRef: containerNode,
    mountOnEnter: true,
    unmountOnExit: true,
    timeout: durationBase,
    onEntered: onEntered,
    onExited: onExited
  }), /*#__PURE__*/React$1.createElement("div", {
    className: styles.Container,
    "data-polaris-layer": true,
    "data-polaris-overlay": true,
    ref: containerNode
  }, /*#__PURE__*/React$1.createElement(TrapFocus$1, null, /*#__PURE__*/React$1.createElement("div", {
    role: "dialog",
    "aria-labelledby": labelledBy,
    tabIndex: -1,
    className: styles.Dialog
  }, /*#__PURE__*/React$1.createElement("div", {
    className: classes
  }, /*#__PURE__*/React$1.createElement(KeypressListener$1, {
    keyCode: Key.Escape,
    handler: onClose
  }), children)))));
}
const fadeUpClasses = {
  appear: classNames(styles.animateFadeUp, styles.entering),
  appearActive: classNames(styles.animateFadeUp, styles.entered),
  enter: classNames(styles.animateFadeUp, styles.entering),
  enterActive: classNames(styles.animateFadeUp, styles.entered),
  exit: classNames(styles.animateFadeUp, styles.exiting),
  exitActive: classNames(styles.animateFadeUp, styles.exited)
};

function FadeUp(_ref2) {
  let {
    children
  } = _ref2,
      props = _objectWithoutProperties(_ref2, ["children"]);

  return /*#__PURE__*/React$1.createElement(CSSTransition, Object.assign({}, props, {
    classNames: fadeUpClasses
  }), children);
}

export { Dialog };
