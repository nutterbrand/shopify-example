import React$1 from 'react';
import { useTheme } from '../../utilities/theme/hooks.tsx.esnext';
import { useFeatures } from '../../utilities/features/hooks.tsx.esnext';
import { useI18n } from '../../utilities/i18n/hooks.tsx.esnext';
import { classNames } from '../../utilities/css.ts.esnext';
import { Image as Image$1 } from '../Image/Image.tsx.esnext';
import { MobileHamburgerMajor } from '@shopify/polaris-icons';
import { Icon as Icon$1 } from '../Icon/Icon.tsx.esnext';
import { UnstyledLink as UnstyledLink$1 } from '../UnstyledLink/UnstyledLink.tsx.esnext';
import { useToggle as useToggle$1 } from '../../utilities/use-toggle.ts.esnext';
import { getWidth as getWidth$1 } from '../../utilities/get-width.ts.esnext';
import { Search as Search$1 } from './components/Search/Search.tsx.esnext';
import { SearchField as SearchField$1 } from './components/SearchField/SearchField.tsx.esnext';
import { Menu as Menu$1 } from './components/Menu/Menu.tsx.esnext';
import { UserMenu as UserMenu$1 } from './components/UserMenu/UserMenu.tsx.esnext';
import styles from './TopBar.scss.esnext';

var _ref = /*#__PURE__*/React$1.createElement(Icon$1, {
  source: MobileHamburgerMajor
});

// TypeScript can't generate types that correctly infer the typing of
// subcomponents so explicitly state the subcomponents in the type definition.
// Letting this be implicit works in this project but fails in projects that use
// generated *.d.ts files.
const TopBar = function TopBar({
  showNavigationToggle,
  userMenu,
  searchResults,
  searchField,
  secondaryMenu,
  searchResultsVisible,
  searchResultsOverlayVisible = false,
  onNavigationToggle,
  onSearchResultsDismiss,
  contextControl
}) {
  const i18n = useI18n();
  const {
    logo
  } = useTheme();
  const {
    newDesignLanguage
  } = useFeatures();
  const {
    value: focused,
    setTrue: forceTrueFocused,
    setFalse: forceFalseFocused
  } = useToggle$1(false);
  const iconClassName = classNames(styles.NavigationIcon, focused && styles.focused);
  const navigationButtonMarkup = showNavigationToggle ? /*#__PURE__*/React$1.createElement("button", {
    type: "button",
    className: iconClassName,
    onClick: onNavigationToggle,
    onFocus: forceTrueFocused,
    onBlur: forceFalseFocused,
    "aria-label": i18n.translate('Polaris.TopBar.toggleMenuLabel')
  }, _ref) : null;
  const width = getWidth$1(logo, 104);
  let contextMarkup;

  if (contextControl) {
    contextMarkup = /*#__PURE__*/React$1.createElement("div", {
      className: styles.ContextControl
    }, contextControl);
  } else if (logo) {
    const className = classNames(styles.LogoContainer, showNavigationToggle || searchField ? styles.LogoDisplayControl : styles.LogoDisplayContainer);
    contextMarkup = /*#__PURE__*/React$1.createElement("div", {
      className: className
    }, /*#__PURE__*/React$1.createElement(UnstyledLink$1, {
      url: logo.url || '',
      className: styles.LogoLink,
      style: {
        width
      }
    }, /*#__PURE__*/React$1.createElement(Image$1, {
      source: logo.topBarSource || '',
      alt: logo.accessibilityLabel || '',
      className: styles.Logo,
      style: {
        width
      }
    })));
  }

  const searchMarkup = searchField ? /*#__PURE__*/React$1.createElement(React$1.Fragment, null, searchField, /*#__PURE__*/React$1.createElement(Search$1, {
    visible: searchResultsVisible,
    onDismiss: onSearchResultsDismiss,
    overlayVisible: searchResultsOverlayVisible
  }, searchResults)) : null;
  const className = classNames(styles.TopBar, newDesignLanguage && styles['TopBar-newDesignLanguage']);
  return /*#__PURE__*/React$1.createElement("div", {
    className: className
  }, navigationButtonMarkup, contextMarkup, /*#__PURE__*/React$1.createElement("div", {
    className: styles.Contents
  }, /*#__PURE__*/React$1.createElement("div", {
    className: styles.SearchField
  }, searchMarkup), /*#__PURE__*/React$1.createElement("div", {
    className: styles.SecondaryMenu
  }, secondaryMenu), userMenu));
};
TopBar.Menu = Menu$1;
TopBar.SearchField = SearchField$1;
TopBar.UserMenu = UserMenu$1;

export { TopBar };
