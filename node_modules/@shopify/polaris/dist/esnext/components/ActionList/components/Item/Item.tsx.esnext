import React$1 from 'react';
import { useFeatures } from '../../../../utilities/features/hooks.tsx.esnext';
import { classNames } from '../../../../utilities/css.ts.esnext';
import { Icon as Icon$1 } from '../../../Icon/Icon.tsx.esnext';
import { Scrollable as Scrollable$1 } from '../../../Scrollable/Scrollable.tsx.esnext';
import { UnstyledLink as UnstyledLink$1 } from '../../../UnstyledLink/UnstyledLink.tsx.esnext';
import { Badge as Badge$1 } from '../../../Badge/Badge.tsx.esnext';
import { TextStyle as TextStyle$1 } from '../../../TextStyle/TextStyle.tsx.esnext';
import styles from '../../ActionList.scss.esnext';

var _ref = /*#__PURE__*/React$1.createElement(Scrollable$1.ScrollTo, null);

function Item({
  id,
  badge,
  content,
  accessibilityLabel,
  helpText,
  url,
  onAction,
  icon,
  image,
  prefix,
  suffix,
  disabled,
  external,
  destructive,
  ellipsis,
  active,
  role
}) {
  const {
    newDesignLanguage
  } = useFeatures();
  const className = classNames(styles.Item, disabled && styles.disabled, destructive && styles.destructive, active && styles.active, newDesignLanguage && styles.newDesignLanguage);
  let prefixMarkup = null;

  if (prefix) {
    prefixMarkup = /*#__PURE__*/React$1.createElement("div", {
      className: styles.Prefix
    }, prefix);
  } else if (icon) {
    prefixMarkup = /*#__PURE__*/React$1.createElement("div", {
      className: classNames(styles.Prefix, newDesignLanguage && styles.newDesignLanguage)
    }, /*#__PURE__*/React$1.createElement(Icon$1, {
      source: icon
    }));
  } else if (image) {
    prefixMarkup = /*#__PURE__*/React$1.createElement("div", {
      role: "presentation",
      className: styles.Prefix,
      style: {
        backgroundImage: `url(${image}`
      }
    });
  }

  const contentText = ellipsis && content ? `${content}â€¦` : content;
  const contentMarkup = helpText ? /*#__PURE__*/React$1.createElement("div", null, /*#__PURE__*/React$1.createElement("div", null, contentText), /*#__PURE__*/React$1.createElement(TextStyle$1, {
    variation: "subdued"
  }, helpText)) : contentText;
  const badgeMarkup = badge && /*#__PURE__*/React$1.createElement("span", {
    className: styles.Suffix
  }, /*#__PURE__*/React$1.createElement(Badge$1, {
    status: badge.status
  }, badge.content));
  const suffixMarkup = suffix && /*#__PURE__*/React$1.createElement("span", {
    className: classNames(styles.Suffix, newDesignLanguage && styles.newDesignLanguage)
  }, suffix);
  const textMarkup = /*#__PURE__*/React$1.createElement("div", {
    className: styles.Text
  }, contentMarkup);
  const contentElement = /*#__PURE__*/React$1.createElement("div", {
    className: styles.Content
  }, prefixMarkup, textMarkup, badgeMarkup, suffixMarkup);
  const scrollMarkup = active ? _ref : null;
  const control = url ? /*#__PURE__*/React$1.createElement(UnstyledLink$1, {
    id: id,
    url: url,
    className: className,
    external: external,
    "aria-label": accessibilityLabel,
    onClick: onAction
  }, contentElement) : /*#__PURE__*/React$1.createElement("button", {
    id: id,
    type: "button",
    className: className,
    disabled: disabled,
    "aria-label": accessibilityLabel,
    onClick: onAction
  }, contentElement);
  return /*#__PURE__*/React$1.createElement("li", {
    role: role,
    "aria-selected": active
  }, scrollMarkup, control);
}

export { Item };
