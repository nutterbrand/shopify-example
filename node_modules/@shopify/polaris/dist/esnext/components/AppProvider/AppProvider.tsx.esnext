import React$1, { Component } from 'react';
import { FeaturesContext } from '../../utilities/features/context.ts.esnext';
import { ThemeProvider as ThemeProvider$1 } from '../ThemeProvider/ThemeProvider.tsx.esnext';
import { MediaQueryProvider as MediaQueryProvider$1 } from '../MediaQueryProvider/MediaQueryProvider.tsx.esnext';
import { UniqueIdFactoryContext } from '../../utilities/unique-id/context.ts.esnext';
import { UniqueIdFactory, globalIdGeneratorFactory } from '../../utilities/unique-id/unique-id-factory.ts.esnext';
import { FocusManager as FocusManager$1 } from '../FocusManager/FocusManager.tsx.esnext';
import { PortalsManager as PortalsManager$1 } from '../PortalsManager/PortalsManager.tsx.esnext';
import { I18nContext } from '../../utilities/i18n/context.tsx.esnext';
import { I18n as I18n$1 } from '../../utilities/i18n/I18n.ts.esnext';
import { ScrollLockManagerContext } from '../../utilities/scroll-lock-manager/context.tsx.esnext';
import { ScrollLockManager } from '../../utilities/scroll-lock-manager/scroll-lock-manager.ts.esnext';
import { StickyManagerContext } from '../../utilities/sticky-manager/context.tsx.esnext';
import { StickyManager } from '../../utilities/sticky-manager/sticky-manager.ts.esnext';
import { LinkContext } from '../../utilities/link/context.tsx.esnext';
import './AppProvider.css';

class AppProvider extends Component {
  constructor(props) {
    super(props);
    this.stickyManager = void 0;
    this.scrollLockManager = void 0;
    this.uniqueIdFactory = void 0;
    this.stickyManager = new StickyManager();
    this.scrollLockManager = new ScrollLockManager();
    this.uniqueIdFactory = new UniqueIdFactory(globalIdGeneratorFactory);
    const {
      i18n,
      linkComponent
    } = this.props; // eslint-disable-next-line react/state-in-constructor

    this.state = {
      link: linkComponent,
      intl: new I18n$1(i18n)
    };
  }

  componentDidMount() {
    if (document != null) {
      this.stickyManager.setContainer(document);
    }
  }

  componentDidUpdate({
    i18n: prevI18n,
    linkComponent: prevLinkComponent
  }) {
    const {
      i18n,
      linkComponent
    } = this.props;

    if (i18n === prevI18n && linkComponent === prevLinkComponent) {
      return;
    } // eslint-disable-next-line react/no-did-update-set-state


    this.setState({
      link: linkComponent,
      intl: new I18n$1(i18n)
    });
  }

  render() {
    const {
      theme = {},
      children
    } = this.props;
    const {
      intl,
      link
    } = this.state;
    const features = {
      newDesignLanguage: false,
      ...this.props.features
    };
    return /*#__PURE__*/React$1.createElement(FeaturesContext.Provider, {
      value: features
    }, /*#__PURE__*/React$1.createElement(I18nContext.Provider, {
      value: intl
    }, /*#__PURE__*/React$1.createElement(ScrollLockManagerContext.Provider, {
      value: this.scrollLockManager
    }, /*#__PURE__*/React$1.createElement(StickyManagerContext.Provider, {
      value: this.stickyManager
    }, /*#__PURE__*/React$1.createElement(UniqueIdFactoryContext.Provider, {
      value: this.uniqueIdFactory
    }, /*#__PURE__*/React$1.createElement(LinkContext.Provider, {
      value: link
    }, /*#__PURE__*/React$1.createElement(ThemeProvider$1, {
      theme: theme
    }, /*#__PURE__*/React$1.createElement(MediaQueryProvider$1, null, /*#__PURE__*/React$1.createElement(PortalsManager$1, null, /*#__PURE__*/React$1.createElement(FocusManager$1, null, children))))))))));
  }

}

export { AppProvider };
