import React$1, { useCallback } from 'react';
import { useI18n } from '../../../../../../utilities/i18n/hooks.tsx.esnext';
import { useIsMountedRef as useIsMountedRef$1 } from '../../../../../../utilities/use-is-mounted-ref.ts.esnext';
import { Stack as Stack$1 } from '../../../../../Stack/Stack.tsx.esnext';
import { TextField } from '../../../../../TextField/TextField.tsx.esnext';
import { Select as Select$1 } from '../../../../../Select/Select.tsx.esnext';
import { DateSelector as DateSelector$1 } from '../DateSelector/DateSelector.tsx.esnext';
import { FilterType } from '../../types.ts.esnext';

function FilterValueSelector({
  filter,
  filterKey,
  value,
  onChange,
  onFilterKeyChange
}) {
  const i18n = useI18n();
  const isMounted = useIsMountedRef$1();
  const {
    operatorText,
    type,
    label
  } = filter;
  const showOperatorOptions = type !== FilterType.DateSelector && operatorText && typeof operatorText !== 'string';
  const handleOperatorOptionChange = useCallback(operatorKey => {
    onFilterKeyChange(operatorKey);

    if (!value) {
      return;
    }

    onChange(value);
  }, [onChange, onFilterKeyChange, value]);

  if (showOperatorOptions && operatorText.length !== 0 && !isMounted.current) {
    handleOperatorOptionChange(operatorText[0].key);
  }

  const operatorOptionsMarkup = showOperatorOptions ? /*#__PURE__*/React$1.createElement(Select$1, {
    label: label,
    labelHidden: true,
    options: buildOperatorOptions(operatorText),
    value: filterKey,
    onChange: handleOperatorOptionChange
  }) : null;
  const selectedFilterLabel = typeof operatorText === 'string' ? operatorText : '';

  switch (filter.type) {
    case FilterType.Select:
      return /*#__PURE__*/React$1.createElement(Stack$1, {
        vertical: true
      }, operatorOptionsMarkup, /*#__PURE__*/React$1.createElement(Select$1, {
        label: selectedFilterLabel,
        options: filter.options,
        placeholder: i18n.translate('Polaris.ResourceList.FilterValueSelector.selectFilterValuePlaceholder'),
        value: value,
        onChange: onChange
      }));

    case FilterType.TextField:
      return /*#__PURE__*/React$1.createElement(Stack$1, {
        vertical: true
      }, operatorOptionsMarkup, /*#__PURE__*/React$1.createElement(TextField, {
        label: selectedFilterLabel,
        value: value,
        type: filter.textFieldType,
        onChange: onChange
      }));

    case FilterType.DateSelector:
      return /*#__PURE__*/React$1.createElement(DateSelector$1, {
        dateOptionType: filter.dateOptionType,
        filterValue: value,
        filterKey: filterKey,
        filterMinKey: filter.minKey,
        filterMaxKey: filter.maxKey,
        onFilterValueChange: onChange,
        onFilterKeyChange: onFilterKeyChange
      });

    default:
      return null;
  }
}

function buildOperatorOptions(operatorText) {
  if (!operatorText || typeof operatorText === 'string') {
    return [];
  }

  return operatorText.map(({
    key,
    optionLabel
  }) => {
    return {
      value: key,
      label: optionLabel
    };
  });
}

export { FilterValueSelector };
