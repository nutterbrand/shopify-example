import React$1, { memo, createRef } from 'react';
import { EventListener as EventListener$1 } from '../../../EventListener/EventListener.tsx.esnext';
import { classNames } from '../../../../utilities/css.ts.esnext';
import { Portal as Portal$1 } from '../../../Portal/Portal.tsx.esnext';
import { useDeepEffect as useDeepEffect$1 } from '../../../../utilities/use-deep-effect.tsx.esnext';
import { CSSTransition, TransitionGroup } from 'react-transition-group';
import { Toast as Toast$1 } from '../Toast/Toast.tsx.esnext';
import { useDeepCallback as useDeepCallback$1 } from '../../../../utilities/use-deep-callback.tsx.esnext';
import styles from './ToastManager.scss.esnext';

const ToastManager = /*#__PURE__*/memo(function ToastManager({
  toastMessages
}) {
  const toastNodes = [];
  const updateToasts = useDeepCallback$1(() => {
    let targetInPos = 0;
    toastMessages.forEach((_, index) => {
      const currentToast = toastNodes[index];
      if (!currentToast.current) return;
      targetInPos += currentToast.current.clientHeight;
      currentToast.current.style.setProperty('--toast-translate-y-in', `-${targetInPos}px`);
      currentToast.current.style.setProperty('--toast-translate-y-out', `${-targetInPos + 150}px`);
    });
  }, [toastMessages, toastNodes]);
  useDeepEffect$1(() => {
    updateToasts();
  }, [toastMessages]);
  const toastsMarkup = toastMessages.map((toast, index) => {
    const toastNode = /*#__PURE__*/createRef();
    toastNodes[index] = toastNode;
    return /*#__PURE__*/React$1.createElement(CSSTransition, {
      nodeRef: toastNodes[index],
      key: toast.id,
      timeout: {
        enter: 0,
        exit: 400
      },
      classNames: toastClasses
    }, /*#__PURE__*/React$1.createElement("div", {
      ref: toastNode
    }, /*#__PURE__*/React$1.createElement(Toast$1, toast)));
  });
  return /*#__PURE__*/React$1.createElement(Portal$1, null, /*#__PURE__*/React$1.createElement(EventListener$1, {
    event: "resize",
    handler: updateToasts
  }), /*#__PURE__*/React$1.createElement("div", {
    className: styles.ToastManager,
    "aria-live": "polite"
  }, /*#__PURE__*/React$1.createElement(TransitionGroup, {
    component: null
  }, toastsMarkup)));
});
const toastClasses = {
  enter: classNames(styles.ToastWrapper, styles['ToastWrapper-enter']),
  enterDone: classNames(styles.ToastWrapper, styles['ToastWrapper-enter-done']),
  exit: classNames(styles.ToastWrapper, styles['ToastWrapper-exit'])
};

export { ToastManager };
