import React$1, { StrictMode, Fragment } from 'react';
import { ThemeContext } from '../../utilities/theme/context.tsx.esnext';
import { buildCustomProperties, buildThemeContext } from '../../utilities/theme/utils.ts.esnext';
import { FeaturesContext } from '../../utilities/features/context.ts.esnext';
import { MediaQueryContext } from '../../utilities/media-query/context.tsx.esnext';
import { UniqueIdFactoryContext } from '../../utilities/unique-id/context.ts.esnext';
import { UniqueIdFactory, globalIdGeneratorFactory } from '../../utilities/unique-id/unique-id-factory.ts.esnext';
import { FocusManager as FocusManager$1 } from '../FocusManager/FocusManager.tsx.esnext';
import { PortalsManager as PortalsManager$1 } from '../PortalsManager/PortalsManager.tsx.esnext';
import { I18nContext } from '../../utilities/i18n/context.tsx.esnext';
import { merge as merge$1 } from '../../utilities/merge.ts.esnext';
import { I18n as I18n$1 } from '../../utilities/i18n/I18n.ts.esnext';
import { ScrollLockManagerContext } from '../../utilities/scroll-lock-manager/context.tsx.esnext';
import { ScrollLockManager } from '../../utilities/scroll-lock-manager/scroll-lock-manager.ts.esnext';
import { StickyManagerContext } from '../../utilities/sticky-manager/context.tsx.esnext';
import { StickyManager } from '../../utilities/sticky-manager/sticky-manager.ts.esnext';
import { LinkContext } from '../../utilities/link/context.tsx.esnext';
import { FrameContext } from '../../utilities/frame/context.ts.esnext';

const defaultMediaQuery = {
  isNavigationCollapsed: false
};
function PolarisTestProvider({
  strict,
  children,
  i18n,
  link,
  theme = {},
  mediaQuery,
  features: featuresProp = {},
  frame
}) {
  const Wrapper = strict ? StrictMode : Fragment;
  const intl = new I18n$1(i18n || {});
  const scrollLockManager = new ScrollLockManager();
  const stickyManager = new StickyManager();
  const uniqueIdFactory = new UniqueIdFactory(globalIdGeneratorFactory);
  const features = {
    newDesignLanguage: false,
    ...featuresProp
  };
  const customProperties = features.newDesignLanguage ? buildCustomProperties({ ...theme,
    colorScheme: 'light'
  }, features.newDesignLanguage) : undefined;
  const mergedTheme = buildThemeContext(theme, customProperties);
  const mergedFrame = createFrameContext(frame);
  const mergedMediaQuery = merge$1(defaultMediaQuery, mediaQuery);
  return /*#__PURE__*/React$1.createElement(Wrapper, null, /*#__PURE__*/React$1.createElement(FeaturesContext.Provider, {
    value: features
  }, /*#__PURE__*/React$1.createElement(I18nContext.Provider, {
    value: intl
  }, /*#__PURE__*/React$1.createElement(ScrollLockManagerContext.Provider, {
    value: scrollLockManager
  }, /*#__PURE__*/React$1.createElement(StickyManagerContext.Provider, {
    value: stickyManager
  }, /*#__PURE__*/React$1.createElement(UniqueIdFactoryContext.Provider, {
    value: uniqueIdFactory
  }, /*#__PURE__*/React$1.createElement(LinkContext.Provider, {
    value: link
  }, /*#__PURE__*/React$1.createElement(ThemeContext.Provider, {
    value: mergedTheme
  }, /*#__PURE__*/React$1.createElement(MediaQueryContext.Provider, {
    value: mergedMediaQuery
  }, /*#__PURE__*/React$1.createElement(PortalsManager$1, null, /*#__PURE__*/React$1.createElement(FocusManager$1, null, /*#__PURE__*/React$1.createElement(FrameContext.Provider, {
    value: mergedFrame
  }, children))))))))))));
}

function noop() {}

function createFrameContext({
  showToast = noop,
  hideToast = noop,
  setContextualSaveBar = noop,
  removeContextualSaveBar = noop,
  startLoading = noop,
  stopLoading = noop
} = {}) {
  return {
    showToast,
    hideToast,
    setContextualSaveBar,
    removeContextualSaveBar,
    startLoading,
    stopLoading
  };
}

export { PolarisTestProvider };
