import { Key } from '../../types.ts.esnext';
import React$1, { forwardRef, useRef, useState, useImperativeHandle } from 'react';
import { useFeatures } from '../../utilities/features/hooks.tsx.esnext';
import { useUniqueId } from '../../utilities/unique-id/hooks.ts.esnext';
import { classNames } from '../../utilities/css.ts.esnext';
import { MinusMinor, TickSmallMinor } from '@shopify/polaris-icons';
import { Icon as Icon$1 } from '../Icon/Icon.tsx.esnext';
import { useToggle as useToggle$1 } from '../../utilities/use-toggle.ts.esnext';
import { errorTextID } from '../InlineError/InlineError.tsx.esnext';
import { Choice as Choice$1, helpTextID } from '../Choice/Choice.tsx.esnext';
import styles from './Checkbox.scss.esnext';

const Checkbox = /*#__PURE__*/forwardRef(function Checkbox({
  ariaDescribedBy: ariaDescribedByProp,
  label,
  labelHidden,
  checked = false,
  helpText,
  disabled,
  id: idProp,
  name,
  value,
  error,
  onChange,
  onFocus,
  onBlur
}, ref) {
  const inputNode = useRef(null);
  const {
    newDesignLanguage
  } = useFeatures();
  const id = useUniqueId('Checkbox', idProp);
  const {
    value: mouseOver,
    setTrue: handleMouseOver,
    setFalse: handleMouseOut
  } = useToggle$1(false);
  const [keyFocused, setKeyFocused] = useState(false);
  useImperativeHandle(ref, () => ({
    focus: () => {
      if (inputNode.current) {
        inputNode.current.focus();
      }
    }
  }));

  const handleBlur = () => {
    onBlur && onBlur();
    setKeyFocused(false);
  };

  const handleInput = () => {
    if (onChange == null || inputNode.current == null || disabled) {
      return;
    }

    onChange(!inputNode.current.checked, id);
    inputNode.current.focus();
  };

  const handleKeyUp = event => {
    const {
      keyCode
    } = event;
    !keyFocused && setKeyFocused(true);

    if (keyCode === Key.Space) {
      handleInput();
    }
  };

  const describedBy = [];

  if (error && typeof error !== 'boolean') {
    describedBy.push(errorTextID(id));
  }

  if (helpText) {
    describedBy.push(helpTextID(id));
  }

  if (ariaDescribedByProp) {
    describedBy.push(ariaDescribedByProp);
  }

  const ariaDescribedBy = describedBy.length ? describedBy.join(' ') : undefined;
  const wrapperClassName = classNames(styles.Checkbox, error && styles.error, newDesignLanguage && styles.newDesignLanguage);
  const backdropClassName = classNames(styles.Backdrop, mouseOver && styles.hover);
  const isIndeterminate = checked === 'indeterminate';
  const isChecked = !isIndeterminate && Boolean(checked);
  const indeterminateAttributes = isIndeterminate ? {
    indeterminate: 'true',
    'aria-checked': 'mixed'
  } : {
    'aria-checked': isChecked
  };
  const iconSource = isIndeterminate ? MinusMinor : TickSmallMinor;
  const inputClassName = classNames(styles.Input, isIndeterminate && styles['Input-indeterminate'], newDesignLanguage && keyFocused && styles.keyFocused);
  return (
    /*#__PURE__*/

    /* eslint-disable jsx-a11y/no-redundant-roles */
    React$1.createElement(Choice$1, {
      id: id,
      label: label,
      labelHidden: labelHidden,
      helpText: helpText,
      error: error,
      disabled: disabled,
      onClick: handleInput,
      onMouseOver: handleMouseOver,
      onMouseOut: handleMouseOut
    }, /*#__PURE__*/React$1.createElement("span", {
      className: wrapperClassName
    }, /*#__PURE__*/React$1.createElement("input", Object.assign({
      onKeyUp: handleKeyUp,
      ref: inputNode,
      id: id,
      name: name,
      value: value,
      type: "checkbox",
      checked: isChecked,
      disabled: disabled,
      className: inputClassName,
      onFocus: onFocus,
      onBlur: handleBlur,
      onClick: stopPropagation,
      onChange: noop,
      "aria-invalid": error != null,
      "aria-describedby": ariaDescribedBy,
      role: "checkbox"
    }, indeterminateAttributes)), /*#__PURE__*/React$1.createElement("span", {
      className: backdropClassName
    }), /*#__PURE__*/React$1.createElement("span", {
      className: styles.Icon
    }, /*#__PURE__*/React$1.createElement(Icon$1, {
      source: iconSource
    }))))
    /* eslint-enable jsx-a11y/no-redundant-roles */

  );
});

function noop() {}

function stopPropagation(event) {
  event.stopPropagation();
}

export { Checkbox };
