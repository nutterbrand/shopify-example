{"version":3,"file":"react-ssr.esm.js","sources":["../src/getDataFromTree.ts","../src/renderToStringWithData.ts"],"sourcesContent":["import React from 'react';\nimport { getApolloContext } from '@apollo/react-common';\nimport { RenderPromises } from '@apollo/react-hooks';\n\nexport function getDataFromTree(\n  tree: React.ReactNode,\n  context: { [key: string]: any } = {}\n) {\n  return getMarkupFromTree({\n    tree,\n    context,\n    // If you need to configure this renderFunction, call getMarkupFromTree\n    // directly instead of getDataFromTree.\n    renderFunction: require('react-dom/server').renderToStaticMarkup\n  });\n}\n\nexport type GetMarkupFromTreeOptions = {\n  tree: React.ReactNode;\n  context?: { [key: string]: any };\n  renderFunction?: (tree: React.ReactElement<any>) => string;\n};\n\nexport function getMarkupFromTree({\n  tree,\n  context = {},\n  // The rendering function is configurable! We use renderToStaticMarkup as\n  // the default, because it's a little less expensive than renderToString,\n  // and legacy usage of getDataFromTree ignores the return value anyway.\n  renderFunction = require('react-dom/server').renderToStaticMarkup\n}: GetMarkupFromTreeOptions): Promise<string> {\n  const renderPromises = new RenderPromises();\n\n  function process(): Promise<string> | string {\n    // Always re-render from the rootElement, even though it might seem\n    // better to render the children of the component responsible for the\n    // promise, because it is not possible to reconstruct the full context\n    // of the original rendering (including all unknown context provider\n    // elements) for a subtree of the original component tree.\n    const ApolloContext = getApolloContext();\n    const html = renderFunction(\n      React.createElement(\n        ApolloContext.Provider,\n        { value: { ...context, renderPromises } },\n        tree\n      )\n    );\n\n    return renderPromises.hasPromises()\n      ? renderPromises.consumeAndAwaitPromises().then(process)\n      : html;\n  }\n\n  return Promise.resolve().then(process);\n}\n","import { ReactElement } from 'react';\nimport { getMarkupFromTree } from './getDataFromTree';\n\nexport function renderToStringWithData(\n  component: ReactElement<any>\n): Promise<string> {\n  return getMarkupFromTree({\n    tree: component,\n    renderFunction: require('react-dom/server').renderToString\n  });\n}\n"],"names":[],"mappings":";;;;;SAIgB,eAAe,CAC7B,IAAqB,EACrB,OAAoC;IAApC,wBAAA,EAAA,YAAoC;IAEpC,OAAO,iBAAiB,CAAC;QACvB,IAAI,MAAA;QACJ,OAAO,SAAA;QAGP,cAAc,EAAE,OAAO,CAAC,kBAAkB,CAAC,CAAC,oBAAoB;KACjE,CAAC,CAAC;CACJ;AAQD,SAAgB,iBAAiB,CAAC,EAOP;QANzB,cAAI,EACJ,eAAY,EAAZ,iCAAY,EAIZ,sBAAiE,EAAjE,sFAAiE;IAEjE,IAAM,cAAc,GAAG,IAAI,cAAc,EAAE,CAAC;IAE5C,SAAS,OAAO;QAMd,IAAM,aAAa,GAAG,gBAAgB,EAAE,CAAC;QACzC,IAAM,IAAI,GAAG,cAAc,CACzB,KAAK,CAAC,aAAa,CACjB,aAAa,CAAC,QAAQ,EACtB,EAAE,KAAK,wBAAO,OAAO,KAAE,cAAc,gBAAA,GAAE,EAAE,EACzC,IAAI,CACL,CACF,CAAC;QAEF,OAAO,cAAc,CAAC,WAAW,EAAE;cAC/B,cAAc,CAAC,uBAAuB,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC;cACtD,IAAI,CAAC;KACV;IAED,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;CACxC;;SCnDe,sBAAsB,CACpC,SAA4B;IAE5B,OAAO,iBAAiB,CAAC;QACvB,IAAI,EAAE,SAAS;QACf,cAAc,EAAE,OAAO,CAAC,kBAAkB,CAAC,CAAC,cAAc;KAC3D,CAAC,CAAC;CACJ;;;;"}