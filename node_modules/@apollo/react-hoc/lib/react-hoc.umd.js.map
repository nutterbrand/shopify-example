{"version":3,"sources":["../src/hoc-utils.tsx","../src/query-hoc.tsx","../src/mutation-hoc.tsx","../src/subscription-hoc.tsx","../src/graphql.tsx","../src/withApollo.tsx"],"names":["getDisplayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { invariant } from 'ts-invariant';\nimport { IDocumentDefinition, OperationVariables } from '@apollo/react-common';\n\nexport const defaultMapPropsToOptions = () => ({});\nexport const defaultMapResultToProps: <P>(props: P) => P = props => props;\nexport const defaultMapPropsToSkip = () => false;\n\nexport function getDisplayName<P>(WrappedComponent: React.ComponentType<P>) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n\nexport function calculateVariablesFromProps<TProps>(\n  operation: IDocumentDefinition,\n  props: TProps\n) {\n  let variables: OperationVariables = {};\n  for (let { variable, type } of operation.variables) {\n    if (!variable.name || !variable.name.value) continue;\n\n    const variableName = variable.name.value;\n    const variableProp = (props as any)[variableName];\n\n    if (typeof variableProp !== 'undefined') {\n      variables[variableName] = variableProp;\n      continue;\n    }\n\n    // Allow optional props\n    if (type.kind !== 'NonNullType') {\n      variables[variableName] = undefined;\n    }\n  }\n  return variables;\n}\n\nexport type RefSetter<TChildProps> = (\n  ref: React.ComponentClass<TChildProps>\n) => void | void;\n\n// base class for hocs to easily manage refs\nexport class GraphQLBase<\n  TProps,\n  TChildProps,\n  TState = any\n  > extends React.Component<TProps, TState> {\n  public withRef: boolean = false;\n  // wrapped instance\n  private wrappedInstance?: React.ComponentClass<TChildProps>;\n\n  constructor(props: TProps) {\n    super(props);\n    this.setWrappedInstance = this.setWrappedInstance.bind(this);\n  }\n\n  getWrappedInstance() {\n    invariant(\n      this.withRef,\n      `To access the wrapped instance, you need to specify ` +\n      `{ withRef: true } in the options`\n    );\n\n    return this.wrappedInstance;\n  }\n\n  setWrappedInstance(ref: React.ComponentClass<TChildProps>) {\n    this.wrappedInstance = ref;\n  }\n}\n","import React from 'react';\nimport { DocumentNode } from 'graphql';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { parser, BaseQueryOptions } from '@apollo/react-common';\nimport { Query } from '@apollo/react-components';\n\nimport {\n  getDisplayName,\n  GraphQLBase,\n  calculateVariablesFromProps,\n  defaultMapPropsToOptions,\n  defaultMapPropsToSkip\n} from './hoc-utils';\nimport { OperationOption, OptionProps, DataProps } from './types';\n\nexport function withQuery<\n  TProps extends TGraphQLVariables | {} = {},\n  TData = {},\n  TGraphQLVariables = {},\n  TChildProps = DataProps<TData, TGraphQLVariables>\n>(\n  document: DocumentNode,\n  operationOptions: OperationOption<\n    TProps,\n    TData,\n    TGraphQLVariables,\n    TChildProps\n  > = {}\n) {\n  // this is memoized so if coming from `graphql` there is nearly no extra cost\n  const operation = parser(document);\n  // extract options\n  const {\n    options = defaultMapPropsToOptions,\n    skip = defaultMapPropsToSkip,\n    alias = 'Apollo'\n  } = operationOptions;\n\n  let mapPropsToOptions = options as (props: any) => BaseQueryOptions;\n  if (typeof mapPropsToOptions !== 'function') {\n    mapPropsToOptions = () => options as BaseQueryOptions;\n  }\n\n  let mapPropsToSkip = skip as (props: any) => boolean;\n  if (typeof mapPropsToSkip !== 'function') {\n    mapPropsToSkip = () => skip as any;\n  }\n\n  // allow for advanced referential equality checks\n  let lastResultProps: TChildProps | void;\n  return (\n    WrappedComponent: React.ComponentType<TProps & TChildProps>\n  ): React.ComponentClass<TProps> => {\n    const graphQLDisplayName = `${alias}(${getDisplayName(WrappedComponent)})`;\n    class GraphQL extends GraphQLBase<TProps, TChildProps> {\n      static displayName = graphQLDisplayName;\n      static WrappedComponent = WrappedComponent;\n\n      render() {\n        let props = this.props;\n        const shouldSkip = mapPropsToSkip(props);\n        const opts = shouldSkip\n          ? Object.create(null)\n          : { ...mapPropsToOptions(props) };\n\n        if (!shouldSkip && !opts.variables && operation.variables.length > 0) {\n          opts.variables = calculateVariablesFromProps(operation, props);\n        }\n\n        return (\n          <Query\n            {...opts}\n            displayName={graphQLDisplayName}\n            skip={shouldSkip}\n            query={document}\n          >\n            {({ client: _, data, ...r }: any) => {\n              if (operationOptions.withRef) {\n                this.withRef = true;\n                props = Object.assign({}, props, {\n                  ref: this.setWrappedInstance\n                });\n              }\n\n              // if we have skipped, no reason to manage any reshaping\n              if (shouldSkip) {\n                return (\n                  <WrappedComponent\n                    {...props as TProps}\n                    {...{} as TChildProps}\n                  />\n                );\n              }\n\n              // the HOC's historically hoisted the data from the execution result\n              // up onto the result since it was passed as a nested prop\n              // we massage the Query components shape here to replicate that\n              const result = Object.assign(r, data || {});\n              const name = operationOptions.name || 'data';\n              let childProps = { [name]: result };\n              if (operationOptions.props) {\n                const newResult: OptionProps<\n                  TProps,\n                  TData,\n                  TGraphQLVariables\n                > = {\n                  [name]: result,\n                  ownProps: props as TProps\n                };\n                lastResultProps = operationOptions.props(\n                  newResult,\n                  lastResultProps\n                );\n                childProps = lastResultProps;\n              }\n\n              return (\n                <WrappedComponent\n                  {...props as TProps}\n                  {...childProps as TChildProps}\n                />\n              );\n            }}\n          </Query>\n        );\n      }\n    }\n\n    // Make sure we preserve any custom statics on the original component.\n    return hoistNonReactStatics(GraphQL, WrappedComponent, {});\n  };\n}\n","import React from 'react';\nimport { DocumentNode } from 'graphql';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport {\n  parser,\n  BaseMutationOptions,\n  MutationFunction,\n  MutationResult\n} from '@apollo/react-common';\nimport { Mutation } from '@apollo/react-components';\n\nimport {\n  defaultMapPropsToOptions,\n  getDisplayName,\n  calculateVariablesFromProps,\n  GraphQLBase\n} from './hoc-utils';\nimport { OperationOption, OptionProps, MutateProps } from './types';\n\nexport function withMutation<\n  TProps extends TGraphQLVariables | {} = {},\n  TData = {},\n  TGraphQLVariables = {},\n  TChildProps = MutateProps<TData, TGraphQLVariables>\n>(\n  document: DocumentNode,\n  operationOptions: OperationOption<\n    TProps,\n    TData,\n    TGraphQLVariables,\n    TChildProps\n  > = {}\n) {\n  // this is memoized so if coming from `graphql` there is nearly no extra cost\n  const operation = parser(document);\n  // extract options\n\n  const {\n    options = defaultMapPropsToOptions,\n    alias = 'Apollo'\n  } = operationOptions;\n\n  let mapPropsToOptions = options as (props: any) => BaseMutationOptions;\n  if (typeof mapPropsToOptions !== 'function')\n    mapPropsToOptions = () => options as BaseMutationOptions;\n\n  return (\n    WrappedComponent: React.ComponentType<TProps & TChildProps>\n  ): React.ComponentClass<TProps> => {\n    const graphQLDisplayName = `${alias}(${getDisplayName(WrappedComponent)})`;\n    class GraphQL extends GraphQLBase<TProps, TChildProps> {\n      static displayName = graphQLDisplayName;\n      static WrappedComponent = WrappedComponent;\n      render() {\n        let props = this.props as TProps;\n        const opts = mapPropsToOptions(props);\n\n        if (operationOptions.withRef) {\n          this.withRef = true;\n          props = Object.assign({}, props, {\n            ref: this.setWrappedInstance\n          });\n        }\n        if (!opts.variables && operation.variables.length > 0) {\n          opts.variables = calculateVariablesFromProps(operation, props);\n        }\n\n        return (\n          <Mutation ignoreResults {...opts} mutation={document}>\n            {(\n              mutate: MutationFunction<TData, TGraphQLVariables>,\n              { data, ...r }: MutationResult<TData>\n            ) => {\n              // the HOC's historically hoisted the data from the execution result\n              // up onto the result since it was passed as a nested prop\n              // we massage the Mutation component's shape here to replicate that\n              // this matches the query HoC\n              const result = Object.assign(r, data || {});\n              const name = operationOptions.name || 'mutate';\n              const resultName = operationOptions.name\n                ? `${name}Result`\n                : 'result';\n              let childProps = ({\n                [name]: mutate,\n                [resultName]: result\n              } as any) as TChildProps;\n              if (operationOptions.props) {\n                const newResult: OptionProps<\n                  TProps,\n                  TData,\n                  TGraphQLVariables\n                > = {\n                  [name]: mutate,\n                  [resultName]: result,\n                  ownProps: props\n                };\n                childProps = operationOptions.props(newResult) as any;\n              }\n\n              return <WrappedComponent {...props} {...childProps} />;\n            }}\n          </Mutation>\n        );\n      }\n    }\n\n    // Make sure we preserve any custom statics on the original component.\n    return hoistNonReactStatics(GraphQL, WrappedComponent, {});\n  };\n}\n","import React from 'react';\nimport { DocumentNode } from 'graphql';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { parser, BaseQueryOptions } from '@apollo/react-common';\nimport { Subscription } from '@apollo/react-components';\n\nimport {\n  getDisplayName,\n  GraphQLBase,\n  calculateVariablesFromProps,\n  defaultMapPropsToOptions,\n  defaultMapPropsToSkip\n} from './hoc-utils';\nimport { OperationOption, OptionProps, DataProps } from './types';\n\nexport function withSubscription<\n  TProps extends TGraphQLVariables | {} = {},\n  TData = {},\n  TGraphQLVariables = {},\n  TChildProps = DataProps<TData, TGraphQLVariables>\n>(\n  document: DocumentNode,\n  operationOptions: OperationOption<\n    TProps,\n    TData,\n    TGraphQLVariables,\n    TChildProps\n  > = {}\n) {\n  // this is memoized so if coming from `graphql` there is nearly no extra cost\n  const operation = parser(document);\n  // extract options\n  const {\n    options = defaultMapPropsToOptions,\n    skip = defaultMapPropsToSkip,\n    alias = 'Apollo',\n    shouldResubscribe\n  } = operationOptions;\n\n  let mapPropsToOptions = options as (props: any) => BaseQueryOptions;\n  if (typeof mapPropsToOptions !== 'function')\n    mapPropsToOptions = () => options as BaseQueryOptions;\n\n  let mapPropsToSkip = skip as (props: any) => boolean;\n  if (typeof mapPropsToSkip !== 'function') mapPropsToSkip = () => skip as any;\n\n  // allow for advanced referential equality checks\n  let lastResultProps: TChildProps | void;\n  return (\n    WrappedComponent: React.ComponentType<TProps & TChildProps>\n  ): React.ComponentClass<TProps> => {\n    const graphQLDisplayName = `${alias}(${getDisplayName(WrappedComponent)})`;\n    class GraphQL extends GraphQLBase<\n      TProps,\n      TChildProps,\n      { resubscribe: boolean }\n    > {\n      static displayName = graphQLDisplayName;\n      static WrappedComponent = WrappedComponent;\n      constructor(props: TProps) {\n        super(props);\n        this.state = { resubscribe: false };\n      }\n\n      componentDidUpate(prevProps: TProps) {\n        if (shouldResubscribe) {\n          this.setState({\n            resubscribe: shouldResubscribe(prevProps, this.props)\n          });\n        }\n      }\n\n      render() {\n        let props = this.props;\n        const shouldSkip = mapPropsToSkip(props);\n        const opts = shouldSkip\n          ? Object.create(null)\n          : mapPropsToOptions(props);\n\n        if (!shouldSkip && !opts.variables && operation.variables.length > 0) {\n          opts.variables = calculateVariablesFromProps(operation, props);\n        }\n        return (\n          <Subscription\n            {...opts}\n            displayName={graphQLDisplayName}\n            skip={shouldSkip}\n            subscription={document}\n            shouldResubscribe={this.state.resubscribe}\n          >\n            {({ data, ...r }: any) => {\n              if (operationOptions.withRef) {\n                this.withRef = true;\n                props = Object.assign({}, props, {\n                  ref: this.setWrappedInstance\n                });\n              }\n              // if we have skipped, no reason to manage any reshaping\n              if (shouldSkip) {\n                return (\n                  <WrappedComponent\n                    {...props as TProps}\n                    {...{} as TChildProps}\n                  />\n                );\n              }\n\n              // the HOC's historically hoisted the data from the execution result\n              // up onto the result since it was passed as a nested prop\n              // we massage the Query components shape here to replicate that\n              const result = Object.assign(r, data || {});\n              const name = operationOptions.name || 'data';\n              let childProps = { [name]: result };\n              if (operationOptions.props) {\n                const newResult: OptionProps<\n                  TProps,\n                  TData,\n                  TGraphQLVariables\n                > = {\n                  [name]: result,\n                  ownProps: props as TProps\n                };\n                lastResultProps = operationOptions.props(\n                  newResult,\n                  lastResultProps\n                );\n                childProps = lastResultProps;\n              }\n\n              return (\n                <WrappedComponent\n                  {...props as TProps}\n                  {...childProps as TChildProps}\n                />\n              );\n            }}\n          </Subscription>\n        );\n      }\n    }\n\n    // Make sure we preserve any custom statics on the original component.\n    return hoistNonReactStatics(GraphQL, WrappedComponent, {});\n  };\n}\n","import { DocumentNode } from 'graphql';\nimport { parser, DocumentType } from '@apollo/react-common';\n\nimport { withQuery } from './query-hoc';\nimport { withMutation } from './mutation-hoc';\nimport { withSubscription } from './subscription-hoc';\nimport { OperationOption, DataProps, MutateProps } from './types';\n\nexport function graphql<\n  TProps extends TGraphQLVariables | {} = {},\n  TData = {},\n  TGraphQLVariables = {},\n  TChildProps = Partial<DataProps<TData, TGraphQLVariables>> &\n    Partial<MutateProps<TData, TGraphQLVariables>>\n>(\n  document: DocumentNode,\n  operationOptions: OperationOption<\n    TProps,\n    TData,\n    TGraphQLVariables,\n    TChildProps\n  > = {}\n) {\n  switch (parser(document).type) {\n    case DocumentType.Mutation:\n      return withMutation(document, operationOptions);\n    case DocumentType.Subscription:\n      return withSubscription(document, operationOptions);\n    case DocumentType.Query:\n    default:\n      return withQuery(document, operationOptions);\n  }\n}\n","import React from 'react';\nimport { ApolloConsumer } from '@apollo/react-common';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { invariant } from 'ts-invariant';\n\nimport { OperationOption, WithApolloClient } from './types';\n\nfunction getDisplayName<P>(WrappedComponent: React.ComponentType<P>) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n\nexport function withApollo<TProps, TResult = any>(\n  WrappedComponent: React.ComponentType<\n    WithApolloClient<Omit<TProps, 'client'>>\n  >,\n  operationOptions: OperationOption<TProps, TResult> = {}\n): React.ComponentClass<Omit<TProps, 'client'>> {\n  const withDisplayName = `withApollo(${getDisplayName(WrappedComponent)})`;\n\n  class WithApollo extends React.Component<Omit<TProps, 'client'>> {\n    static displayName = withDisplayName;\n    static WrappedComponent = WrappedComponent;\n\n    // wrapped instance\n    private wrappedInstance: any;\n\n    constructor(props: Omit<TProps, 'client'>) {\n      super(props);\n      this.setWrappedInstance = this.setWrappedInstance.bind(this);\n    }\n\n    getWrappedInstance() {\n      invariant(\n        operationOptions.withRef,\n        `To access the wrapped instance, you need to specify ` +\n          `{ withRef: true } in the options`\n      );\n\n      return this.wrappedInstance;\n    }\n\n    setWrappedInstance(ref: React.ComponentType<WithApolloClient<TProps>>) {\n      this.wrappedInstance = ref;\n    }\n\n    render() {\n      return (\n        <ApolloConsumer>\n          {client => {\n            const props = Object.assign({}, this.props, {\n              client,\n              ref: operationOptions.withRef\n                ? this.setWrappedInstance\n                : undefined\n            });\n            return <WrappedComponent {...props} />;\n          }}\n        </ApolloConsumer>\n      );\n    }\n  }\n\n  // Make sure we preserve any custom statics on the original component.\n  return hoistNonReactStatics(WithApollo, WrappedComponent, {});\n}\n"]}